[{"/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/index.js":"1","/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/App.js":"2","/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/pages/SavedBooks.js":"3","/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/pages/SearchBooks.js":"4","/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/components/Navbar.js":"5","/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/components/SignupForm.js":"6","/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/components/LoginForm.js":"7","/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/utils/API.js":"8","/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/utils/localStorage.js":"9","/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/utils/auth.js":"10","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/index.js":"11","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/App.js":"12","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/pages/SavedBooks.js":"13","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/components/Navbar.js":"14","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/pages/SearchBooks.js":"15","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/components/SignupForm.js":"16","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/components/LoginForm.js":"17","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/utils/auth.js":"18","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/utils/mutations.js":"19","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/utils/API.js":"20","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/utils/queries.js":"21","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/utils/localStorage.js":"22"},{"size":266,"mtime":1677551423170,"results":"23","hashOfConfig":"24"},{"size":698,"mtime":1677551423164,"results":"25","hashOfConfig":"24"},{"size":2946,"mtime":1677551423170,"results":"26","hashOfConfig":"24"},{"size":4665,"mtime":1677551423171,"results":"27","hashOfConfig":"24"},{"size":2524,"mtime":1677551423166,"results":"28","hashOfConfig":"24"},{"size":3268,"mtime":1677551423166,"results":"29","hashOfConfig":"24"},{"size":2617,"mtime":1677551423164,"results":"30","hashOfConfig":"24"},{"size":1392,"mtime":1677551423177,"results":"31","hashOfConfig":"24"},{"size":793,"mtime":1677551423178,"results":"32","hashOfConfig":"24"},{"size":1234,"mtime":1677551423177,"results":"33","hashOfConfig":"24"},{"size":266,"mtime":1679957993002,"results":"34","hashOfConfig":"35"},{"size":1283,"mtime":1679958706363,"results":"36","hashOfConfig":"35"},{"size":2404,"mtime":1679957993004,"results":"37","hashOfConfig":"35"},{"size":2524,"mtime":1679957992996,"results":"38","hashOfConfig":"35"},{"size":4777,"mtime":1679957993006,"results":"39","hashOfConfig":"35"},{"size":3274,"mtime":1679957992998,"results":"40","hashOfConfig":"35"},{"size":2621,"mtime":1679957992994,"results":"41","hashOfConfig":"35"},{"size":1234,"mtime":1679957993010,"results":"42","hashOfConfig":"35"},{"size":1321,"mtime":1679957993015,"results":"43","hashOfConfig":"35"},{"size":1392,"mtime":1679957993008,"results":"44","hashOfConfig":"35"},{"size":275,"mtime":1679957993018,"results":"45","hashOfConfig":"35"},{"size":793,"mtime":1679957993012,"results":"46","hashOfConfig":"35"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"vso3nl",{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1uv173y",{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/index.js",[],[],"/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/App.js",[],[],"/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/pages/SavedBooks.js",[],[],"/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/pages/SearchBooks.js",[],[],"/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/components/Navbar.js",[],[],"/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/components/SignupForm.js",[],[],"/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/components/LoginForm.js",[],[],"/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/utils/API.js",[],[],"/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/utils/localStorage.js",[],[],"/Users/nicolecohen/Bootcamp/UW-VIRT-FSF-PT-09-2022-U-LOLC/21-MERN/02-Challenge/Develop/client/src/utils/auth.js",["118"],[],"/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/index.js",[],[],"/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/App.js",[],[],"/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/pages/SavedBooks.js",["119","120"],[],"import React from 'react';\nimport { Jumbotron, Container, CardColumns, Card, Button } from 'react-bootstrap';\n\n// add useQuery and useMutation\nimport { useQuery, useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { removeBookId } from '../utils/localStorage';\nimport { GET_ME } from '../utils/queries';\nimport { REMOVE_BOOK } from '../utils/mutations';\n\nconst SavedBooks = () => {\n// create const for useQuery and useMutation\n  const { loading, data} = useQuery(GET_ME);\n  const [removeBook, {error}] = useMutation(REMOVE_BOOK);\n\n  const userData = data?.me || [];\n\n  // create function that accepts the book's mongo _id value as param and deletes the book from the database\n  const handleDeleteBook = async (bookId) => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const {data} = await removeBook({\n        variables: { bookId },\n      });\n      // upon success, remove book's id from localStorage\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // if data isn't here yet, say so\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Viewing saved books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks.length\n            ? `Viewing ${userData.savedBooks.length} saved ${userData.savedBooks.length === 1 ? 'book' : 'books'}:`\n            : 'You have no saved books!'}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' /> : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button className='btn-block btn-danger' onClick={() => handleDeleteBook(book.bookId)}>\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/components/Navbar.js",[],[],"/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/pages/SearchBooks.js",["121","122"],[],"import React, { useState, useEffect } from 'react';\nimport { Jumbotron, Container, Col, Form, Button, Card, CardColumns } from 'react-bootstrap';\n\nimport Auth from '../utils/auth';\nimport { searchGoogleBooks } from '../utils/API';\nimport { saveBookIds, getSavedBookIds } from '../utils/localStorage';\n// add useMutation\nimport { useMutation } from '@apollo/client';\nimport { SAVE_BOOK } from '../utils/mutations';\n\nconst SearchBooks = () => {\n  // create state for holding returned google api data\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  // create state for holding our search field data\n  const [searchInput, setSearchInput] = useState('');\n\n  // create state to hold saved bookId values\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook, {error}] = useMutation(SAVE_BOOK);\n\n  // set up useEffect hook to save `savedBookIds` list to localStorage on component unmount\n  // learn more here: https://reactjs.org/docs/hooks-effect.html#effects-with-cleanup\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  // create method to search for books and set state on form submit\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await searchGoogleBooks(searchInput);\n\n      if (!response.ok) {\n        throw new Error('something went wrong!');\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || ['No author to display'],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || '',\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  // create function to handle saving a book to our database\n  const handleSaveBook = async (bookId) => {\n    // find the book in `searchedBooks` state by the matching id\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    // get token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const {data} = await saveBook({\n        variables: { bookData: {...bookToSave} },\n      });\n      // if book successfully saves to user's account, save book id to state\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <>\n      <Jumbotron fluid className='text-light bg-dark'>\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name='searchInput'\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type='text'\n                  size='lg'\n                  placeholder='Search for a book'\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type='submit' variant='success' size='lg'>\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : 'Search for a book to begin'}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border='dark'>\n                {book.image ? (\n                  <Card.Img src={book.image} alt={`The cover for ${book.title}`} variant='top' />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className='small'>Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some((savedBookId) => savedBookId === book.bookId)}\n                      className='btn-block btn-info'\n                      onClick={() => handleSaveBook(book.bookId)}>\n                      {savedBookIds?.some((savedBookId) => savedBookId === book.bookId)\n                        ? 'This book has already been saved!'\n                        : 'Save this Book!'}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/components/SignupForm.js",["123"],[],"import React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n// add useMutation\nimport { useMutation } from '@apollo/client';\nimport { ADD_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({ username: '', email: '', password: '' });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, {error}] = useMutation(ADD_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    };\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor='username'>Username</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your username'\n            name='username'\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Username is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='email'\n            placeholder='Your email address'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.username && userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/components/LoginForm.js",["124"],[],"// see SignupForm.js for comments\nimport React, { useState } from 'react';\nimport { Form, Button, Alert } from 'react-bootstrap';\n\n// add useMutation\nimport { useMutation } from '@apollo/client';\nimport { LOGIN_USER } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: '', password: '' });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [login, {error}] = useMutation(LOGIN_USER);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const {data} = await login({\n        variables: { ...userFormData },\n      });\n      Auth.login(data.login.token); \n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert dismissible onClose={() => setShowAlert(false)} show={showAlert} variant='danger'>\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor='email'>Email</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Your email'\n            name='email'\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Email is required!</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor='password'>Password</Form.Label>\n          <Form.Control\n            type='password'\n            placeholder='Your password'\n            name='password'\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type='invalid'>Password is required!</Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type='submit'\n          variant='success'>\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/utils/auth.js",["125"],[],"// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\n// create a new class to instantiate for a user\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/utils/mutations.js",[],[],"/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/utils/API.js",[],[],"/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/utils/queries.js",[],[],"/Users/nicolecohen/Bootcamp/book-search-engine-2/client/src/utils/localStorage.js",[],[],{"ruleId":"126","severity":1,"message":"127","line":49,"column":1,"nodeType":"128","endLine":49,"endColumn":34},{"ruleId":"129","severity":1,"message":"130","line":14,"column":23,"nodeType":"131","messageId":"132","endLine":14,"endColumn":28},{"ruleId":"129","severity":1,"message":"133","line":27,"column":14,"nodeType":"131","messageId":"132","endLine":27,"endColumn":18},{"ruleId":"129","severity":1,"message":"130","line":20,"column":21,"nodeType":"131","messageId":"132","endLine":20,"endColumn":26},{"ruleId":"129","severity":1,"message":"133","line":73,"column":14,"nodeType":"131","messageId":"132","endLine":73,"endColumn":18},{"ruleId":"129","severity":1,"message":"130","line":17,"column":20,"nodeType":"131","messageId":"132","endLine":17,"endColumn":25},{"ruleId":"129","severity":1,"message":"130","line":15,"column":18,"nodeType":"131","messageId":"132","endLine":15,"endColumn":23},{"ruleId":"126","severity":1,"message":"127","line":49,"column":1,"nodeType":"128","endLine":49,"endColumn":34},"import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'data' is assigned a value but never used."]